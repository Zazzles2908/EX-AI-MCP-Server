2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.KIMI for model moonshot-v1-128k-vision-preview
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: get_provider_for_model called with model_name='kimi-latest'
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Registry instance: <src.providers.registry_core.ModelProviderRegistry object at 0x7b9af73a78c0>, _providers={<ProviderType.KIMI: 'kimi'>: <class 'src.providers.kimi.KimiModelProvider'>, <ProviderType.GLM: 'glm'>: <class 'src.providers.glm.GLMModelProvider'>}
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: PROVIDER_PRIORITY_ORDER: [<ProviderType.KIMI: 'kimi'>, <ProviderType.GLM: 'glm'>, <ProviderType.CUSTOM: 'custom'>, <ProviderType.OPENROUTER: 'openrouter'>]
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.KIMI
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.KIMI in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.kimi.KimiModelProvider object at 0x7b9af73a7e00>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.KIMI validate_model_name('kimi-latest') = True
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.KIMI for model kimi-latest
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: get_provider_for_model called with model_name='kimi-latest-8k'
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Registry instance: <src.providers.registry_core.ModelProviderRegistry object at 0x7b9af73a78c0>, _providers={<ProviderType.KIMI: 'kimi'>: <class 'src.providers.kimi.KimiModelProvider'>, <ProviderType.GLM: 'glm'>: <class 'src.providers.glm.GLMModelProvider'>}
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: PROVIDER_PRIORITY_ORDER: [<ProviderType.KIMI: 'kimi'>, <ProviderType.GLM: 'glm'>, <ProviderType.CUSTOM: 'custom'>, <ProviderType.OPENROUTER: 'openrouter'>]
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.KIMI
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.KIMI in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.kimi.KimiModelProvider object at 0x7b9af73a7e00>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.KIMI validate_model_name('kimi-latest-8k') = True
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.KIMI for model kimi-latest-8k
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: get_provider_for_model called with model_name='kimi-latest-32k'
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Registry instance: <src.providers.registry_core.ModelProviderRegistry object at 0x7b9af73a78c0>, _providers={<ProviderType.KIMI: 'kimi'>: <class 'src.providers.kimi.KimiModelProvider'>, <ProviderType.GLM: 'glm'>: <class 'src.providers.glm.GLMModelProvider'>}
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: PROVIDER_PRIORITY_ORDER: [<ProviderType.KIMI: 'kimi'>, <ProviderType.GLM: 'glm'>, <ProviderType.CUSTOM: 'custom'>, <ProviderType.OPENROUTER: 'openrouter'>]
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.KIMI
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.KIMI in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.kimi.KimiModelProvider object at 0x7b9af73a7e00>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.KIMI validate_model_name('kimi-latest-32k') = True
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.KIMI for model kimi-latest-32k
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: get_provider_for_model called with model_name='kimi-latest-128k'
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Registry instance: <src.providers.registry_core.ModelProviderRegistry object at 0x7b9af73a78c0>, _providers={<ProviderType.KIMI: 'kimi'>: <class 'src.providers.kimi.KimiModelProvider'>, <ProviderType.GLM: 'glm'>: <class 'src.providers.glm.GLMModelProvider'>}
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: PROVIDER_PRIORITY_ORDER: [<ProviderType.KIMI: 'kimi'>, <ProviderType.GLM: 'glm'>, <ProviderType.CUSTOM: 'custom'>, <ProviderType.OPENROUTER: 'openrouter'>]
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.KIMI
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.KIMI in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.kimi.KimiModelProvider object at 0x7b9af73a7e00>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.KIMI validate_model_name('kimi-latest-128k') = True
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.KIMI for model kimi-latest-128k
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: get_provider_for_model called with model_name='kimi-thinking-preview'
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Registry instance: <src.providers.registry_core.ModelProviderRegistry object at 0x7b9af73a78c0>, _providers={<ProviderType.KIMI: 'kimi'>: <class 'src.providers.kimi.KimiModelProvider'>, <ProviderType.GLM: 'glm'>: <class 'src.providers.glm.GLMModelProvider'>}
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: PROVIDER_PRIORITY_ORDER: [<ProviderType.KIMI: 'kimi'>, <ProviderType.GLM: 'glm'>, <ProviderType.CUSTOM: 'custom'>, <ProviderType.OPENROUTER: 'openrouter'>]
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.KIMI
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.KIMI in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.kimi.KimiModelProvider object at 0x7b9af73a7e00>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.KIMI validate_model_name('kimi-thinking-preview') = True
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.KIMI for model kimi-thinking-preview
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: get_provider_for_model called with model_name='kimi-k2-0905'
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Registry instance: <src.providers.registry_core.ModelProviderRegistry object at 0x7b9af73a78c0>, _providers={<ProviderType.KIMI: 'kimi'>: <class 'src.providers.kimi.KimiModelProvider'>, <ProviderType.GLM: 'glm'>: <class 'src.providers.glm.GLMModelProvider'>}
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: PROVIDER_PRIORITY_ORDER: [<ProviderType.KIMI: 'kimi'>, <ProviderType.GLM: 'glm'>, <ProviderType.CUSTOM: 'custom'>, <ProviderType.OPENROUTER: 'openrouter'>]
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.KIMI
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.KIMI in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.kimi.KimiModelProvider object at 0x7b9af73a7e00>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.KIMI validate_model_name('kimi-k2-0905') = True
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.KIMI for model kimi-k2-0905
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: get_provider_for_model called with model_name='kimi-k2'
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Registry instance: <src.providers.registry_core.ModelProviderRegistry object at 0x7b9af73a78c0>, _providers={<ProviderType.KIMI: 'kimi'>: <class 'src.providers.kimi.KimiModelProvider'>, <ProviderType.GLM: 'glm'>: <class 'src.providers.glm.GLMModelProvider'>}
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: PROVIDER_PRIORITY_ORDER: [<ProviderType.KIMI: 'kimi'>, <ProviderType.GLM: 'glm'>, <ProviderType.CUSTOM: 'custom'>, <ProviderType.OPENROUTER: 'openrouter'>]
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.KIMI
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.KIMI in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.kimi.KimiModelProvider object at 0x7b9af73a7e00>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.KIMI validate_model_name('kimi-k2') = True
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.KIMI for model kimi-k2
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: get_provider_for_model called with model_name='kimi-k2-0711'
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Registry instance: <src.providers.registry_core.ModelProviderRegistry object at 0x7b9af73a78c0>, _providers={<ProviderType.KIMI: 'kimi'>: <class 'src.providers.kimi.KimiModelProvider'>, <ProviderType.GLM: 'glm'>: <class 'src.providers.glm.GLMModelProvider'>}
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: PROVIDER_PRIORITY_ORDER: [<ProviderType.KIMI: 'kimi'>, <ProviderType.GLM: 'glm'>, <ProviderType.CUSTOM: 'custom'>, <ProviderType.OPENROUTER: 'openrouter'>]
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.KIMI
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.KIMI in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.kimi.KimiModelProvider object at 0x7b9af73a7e00>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.KIMI validate_model_name('kimi-k2-0711') = True
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.KIMI for model kimi-k2-0711
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: get_provider_for_model called with model_name='kimi-k2-turbo'
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Registry instance: <src.providers.registry_core.ModelProviderRegistry object at 0x7b9af73a78c0>, _providers={<ProviderType.KIMI: 'kimi'>: <class 'src.providers.kimi.KimiModelProvider'>, <ProviderType.GLM: 'glm'>: <class 'src.providers.glm.GLMModelProvider'>}
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: PROVIDER_PRIORITY_ORDER: [<ProviderType.KIMI: 'kimi'>, <ProviderType.GLM: 'glm'>, <ProviderType.CUSTOM: 'custom'>, <ProviderType.OPENROUTER: 'openrouter'>]
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.KIMI
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.KIMI in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.kimi.KimiModelProvider object at 0x7b9af73a7e00>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.KIMI validate_model_name('kimi-k2-turbo') = True
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.KIMI for model kimi-k2-turbo
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: get_provider_for_model called with model_name='glm-4.6'
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Registry instance: <src.providers.registry_core.ModelProviderRegistry object at 0x7b9af73a78c0>, _providers={<ProviderType.KIMI: 'kimi'>: <class 'src.providers.kimi.KimiModelProvider'>, <ProviderType.GLM: 'glm'>: <class 'src.providers.glm.GLMModelProvider'>}
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: PROVIDER_PRIORITY_ORDER: [<ProviderType.KIMI: 'kimi'>, <ProviderType.GLM: 'glm'>, <ProviderType.CUSTOM: 'custom'>, <ProviderType.OPENROUTER: 'openrouter'>]
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.KIMI
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.KIMI in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.kimi.KimiModelProvider object at 0x7b9af73a7e00>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.KIMI validate_model_name('glm-4.6') = False
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.GLM
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.GLM in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.glm.GLMModelProvider object at 0x7b9af7154050>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.GLM validate_model_name('glm-4.6') = True
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.GLM for model glm-4.6
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: get_provider_for_model called with model_name='glm-4.5-flash'
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Registry instance: <src.providers.registry_core.ModelProviderRegistry object at 0x7b9af73a78c0>, _providers={<ProviderType.KIMI: 'kimi'>: <class 'src.providers.kimi.KimiModelProvider'>, <ProviderType.GLM: 'glm'>: <class 'src.providers.glm.GLMModelProvider'>}
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: PROVIDER_PRIORITY_ORDER: [<ProviderType.KIMI: 'kimi'>, <ProviderType.GLM: 'glm'>, <ProviderType.CUSTOM: 'custom'>, <ProviderType.OPENROUTER: 'openrouter'>]
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.KIMI
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.KIMI in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.kimi.KimiModelProvider object at 0x7b9af73a7e00>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.KIMI validate_model_name('glm-4.5-flash') = False
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.GLM
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.GLM in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.glm.GLMModelProvider object at 0x7b9af7154050>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.GLM validate_model_name('glm-4.5-flash') = True
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.GLM for model glm-4.5-flash
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: get_provider_for_model called with model_name='glm-4.5'
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Registry instance: <src.providers.registry_core.ModelProviderRegistry object at 0x7b9af73a78c0>, _providers={<ProviderType.KIMI: 'kimi'>: <class 'src.providers.kimi.KimiModelProvider'>, <ProviderType.GLM: 'glm'>: <class 'src.providers.glm.GLMModelProvider'>}
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: PROVIDER_PRIORITY_ORDER: [<ProviderType.KIMI: 'kimi'>, <ProviderType.GLM: 'glm'>, <ProviderType.CUSTOM: 'custom'>, <ProviderType.OPENROUTER: 'openrouter'>]
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.KIMI
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.KIMI in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.kimi.KimiModelProvider object at 0x7b9af73a7e00>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.KIMI validate_model_name('glm-4.5') = False
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.GLM
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.GLM in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.glm.GLMModelProvider object at 0x7b9af7154050>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.GLM validate_model_name('glm-4.5') = True
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.GLM for model glm-4.5
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: get_provider_for_model called with model_name='glm-4.5-air'
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Registry instance: <src.providers.registry_core.ModelProviderRegistry object at 0x7b9af73a78c0>, _providers={<ProviderType.KIMI: 'kimi'>: <class 'src.providers.kimi.KimiModelProvider'>, <ProviderType.GLM: 'glm'>: <class 'src.providers.glm.GLMModelProvider'>}
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: PROVIDER_PRIORITY_ORDER: [<ProviderType.KIMI: 'kimi'>, <ProviderType.GLM: 'glm'>, <ProviderType.CUSTOM: 'custom'>, <ProviderType.OPENROUTER: 'openrouter'>]
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.KIMI
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.KIMI in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.kimi.KimiModelProvider object at 0x7b9af73a7e00>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.KIMI validate_model_name('glm-4.5-air') = False
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.GLM
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.GLM in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.glm.GLMModelProvider object at 0x7b9af7154050>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.GLM validate_model_name('glm-4.5-air') = True
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.GLM for model glm-4.5-air
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: get_provider_for_model called with model_name='glm-4.5v'
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Registry instance: <src.providers.registry_core.ModelProviderRegistry object at 0x7b9af73a78c0>, _providers={<ProviderType.KIMI: 'kimi'>: <class 'src.providers.kimi.KimiModelProvider'>, <ProviderType.GLM: 'glm'>: <class 'src.providers.glm.GLMModelProvider'>}
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: PROVIDER_PRIORITY_ORDER: [<ProviderType.KIMI: 'kimi'>, <ProviderType.GLM: 'glm'>, <ProviderType.CUSTOM: 'custom'>, <ProviderType.OPENROUTER: 'openrouter'>]
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.KIMI
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.KIMI in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.kimi.KimiModelProvider object at 0x7b9af73a7e00>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.KIMI validate_model_name('glm-4.5v') = False
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.GLM
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.GLM in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.glm.GLMModelProvider object at 0x7b9af7154050>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.GLM validate_model_name('glm-4.5v') = True
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.GLM for model glm-4.5v
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: get_provider_for_model called with model_name='glm-4.5-x'
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Registry instance: <src.providers.registry_core.ModelProviderRegistry object at 0x7b9af73a78c0>, _providers={<ProviderType.KIMI: 'kimi'>: <class 'src.providers.kimi.KimiModelProvider'>, <ProviderType.GLM: 'glm'>: <class 'src.providers.glm.GLMModelProvider'>}
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: PROVIDER_PRIORITY_ORDER: [<ProviderType.KIMI: 'kimi'>, <ProviderType.GLM: 'glm'>, <ProviderType.CUSTOM: 'custom'>, <ProviderType.OPENROUTER: 'openrouter'>]
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.KIMI
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.KIMI in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.kimi.KimiModelProvider object at 0x7b9af73a7e00>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.KIMI validate_model_name('glm-4.5-x') = False
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.GLM
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Found ProviderType.GLM in registry
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.glm.GLMModelProvider object at 0x7b9af7154050>
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Provider ProviderType.GLM validate_model_name('glm-4.5-x') = True
2025-10-31 23:59:40 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.GLM for model glm-4.5-x
2025-10-31 23:59:44 INFO src.daemon.connection_manager: Connection unregistered: ifZs4ZGSlgfboYiwwf2IPLuq_32FWTLoCHXBYfBE6nQ from 172.18.0.1 (duration: 10.49s, remaining: 2)
2025-10-31 23:59:44 INFO src.daemon.session_manager: [SESSION_MANAGER] Removed session vscode-instance-2 (total sessions: 1)
2025-10-31 23:59:48 INFO httpx: HTTP Request: GET https://mxaazuhlqewmkweewyaz.supabase.co/rest/v1/auditor_observations?select=%2A&order=timestamp.desc&limit=50 "HTTP/2 200 OK"
2025-10-31 23:59:48 INFO aiohttp.access: 172.18.0.1 [31/Oct/2025:22:59:48 +1000] "GET /api/auditor/observations?limit=50 HTTP/1.1" 200 31481 "http://localhost:8080/monitoring_dashboard.html" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/142.0.0.0 Safari/537.36"
2025-11-01 00:00:49 INFO httpx: HTTP Request: GET https://mxaazuhlqewmkweewyaz.supabase.co/rest/v1/auditor_observations?select=%2A&order=timestamp.desc&limit=50 "HTTP/2 200 OK"
2025-11-01 00:00:49 INFO aiohttp.access: 172.18.0.1 [31/Oct/2025:23:00:48 +1000] "GET /api/auditor/observations?limit=50 HTTP/1.1" 200 31481 "http://localhost:8080/monitoring_dashboard.html" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/142.0.0.0 Safari/537.36"
2025-11-01 00:00:54 INFO src.daemon.ws.request_router: [SEMANTIC_CACHE] Cache MISS for debug (prompt: Testing the auto-execution fix. This is a simple t...)
2025-11-01 00:00:54 INFO mcp_activity: [PROGRESS] debug: Starting step 1/2 - Testing the auto-execution fix. This is a simple test to verify that the tool ma
2025-11-01 00:00:54 INFO utils.caching.base_cache_manager: [ROUTING:PROVIDER_CACHE] L1 initialized: TTLCache(maxsize=50, ttl=300s)
2025-11-01 00:00:54 INFO utils.caching.base_cache_manager: [ROUTING:PROVIDER_CACHE] Base cache manager initialized
2025-11-01 00:00:54 INFO utils.caching.base_cache_manager: [ROUTING:MODEL_CACHE] L1 initialized: TTLCache(maxsize=100, ttl=180s)
2025-11-01 00:00:54 INFO utils.caching.base_cache_manager: [ROUTING:MODEL_CACHE] Base cache manager initialized
2025-11-01 00:00:54 INFO src.router.routing_cache: [ROUTING_CACHE] Tool cache: LRUCache(maxsize=200)
2025-11-01 00:00:54 INFO utils.caching.base_cache_manager: [ROUTING:FALLBACK_CACHE] L1 initialized: TTLCache(maxsize=50, ttl=600s)
2025-11-01 00:00:54 INFO utils.caching.base_cache_manager: [ROUTING:FALLBACK_CACHE] Base cache manager initialized
2025-11-01 00:00:54 INFO src.router.routing_cache: [ROUTING_CACHE] Initialized with Redis L2: provider_ttl=300s, model_ttl=180s, fallback_ttl=600s, redis_enabled=True
2025-11-01 00:00:54 INFO root: REGISTRY_DEBUG: get_provider_for_model called with model_name='glm-4.5-flash'
2025-11-01 00:00:54 INFO root: REGISTRY_DEBUG: Registry instance: <src.providers.registry_core.ModelProviderRegistry object at 0x7b9af73a78c0>, _providers={<ProviderType.KIMI: 'kimi'>: <class 'src.providers.kimi.KimiModelProvider'>, <ProviderType.GLM: 'glm'>: <class 'src.providers.glm.GLMModelProvider'>}
2025-11-01 00:00:54 INFO root: REGISTRY_DEBUG: PROVIDER_PRIORITY_ORDER: [<ProviderType.KIMI: 'kimi'>, <ProviderType.GLM: 'glm'>, <ProviderType.CUSTOM: 'custom'>, <ProviderType.OPENROUTER: 'openrouter'>]
2025-11-01 00:00:54 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.KIMI
2025-11-01 00:00:54 INFO root: REGISTRY_DEBUG: Found ProviderType.KIMI in registry
2025-11-01 00:00:54 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.kimi.KimiModelProvider object at 0x7b9af73a7e00>
2025-11-01 00:00:54 INFO root: REGISTRY_DEBUG: Provider ProviderType.KIMI validate_model_name('glm-4.5-flash') = False
2025-11-01 00:00:54 INFO root: REGISTRY_DEBUG: Checking provider_type ProviderType.GLM
2025-11-01 00:00:54 INFO root: REGISTRY_DEBUG: Found ProviderType.GLM in registry
2025-11-01 00:00:54 INFO root: REGISTRY_DEBUG: Got provider instance: <src.providers.glm.GLMModelProvider object at 0x7b9af7154050>
2025-11-01 00:00:54 INFO root: REGISTRY_DEBUG: Provider ProviderType.GLM validate_model_name('glm-4.5-flash') = True
2025-11-01 00:00:54 INFO root: REGISTRY_DEBUG: Returning provider ProviderType.GLM for model glm-4.5-flash
2025-11-01 00:00:54 INFO utils.conversation.global_storage: [GLOBAL_STORAGE] Created global storage instance: DualStorageConversation (id=135905500548128)
2025-11-01 00:00:54 INFO utils.conversation.threads: [STORAGE_INTEGRATION] Creating thread 72e62dd6-eb38-437e-8b91-85fcf314fda6 using storage factory
2025-11-01 00:00:54 INFO mcp_activity: [PROGRESS] debug: Processed step data. Updating findings...
2025-11-01 00:00:54 INFO tools.workflow.base: [AGENTIC] debug: Cannot terminate early - step 1 < minimum 2
2025-11-01 00:00:54 INFO tools.workflow.orchestration: debug: Auto-execution DISABLED - user must call tool again for next step
2025-11-01 00:00:54 INFO mcp_activity: [PROGRESS] debug: Step 1/2 complete - manual continuation required
2025-11-01 00:00:54 INFO mcp_activity: [PROGRESS] debug: Step 1/2 complete
2025-11-01 00:00:55 INFO httpx: HTTP Request: GET https://mxaazuhlqewmkweewyaz.supabase.co/rest/v1/conversations?select=%2A&continuation_id=eq.72e62dd6-eb38-437e-8b91-85fcf314fda6 "HTTP/2 200 OK"
2025-11-01 00:00:55 INFO httpx: HTTP Request: POST https://mxaazuhlqewmkweewyaz.supabase.co/rest/v1/conversations "HTTP/2 201 Created"
2025-11-01 00:00:55 INFO src.storage.supabase_client: Saved conversation: 72e62dd6-eb38-437e-8b91-85fcf314fda6 -> 4977a9c8-fa20-4af1-8640-12401a77b893
2025-11-01 00:00:55 INFO src.storage.conversation_mapper: Created new conversation: 72e62dd6-eb38-437e-8b91-85fcf314fda6 -> 4977a9c8-fa20-4af1-8640-12401a77b893
2025-11-01 00:00:55 INFO httpx: HTTP Request: GET https://mxaazuhlqewmkweewyaz.supabase.co/rest/v1/messages?select=%2A&conversation_id=eq.4977a9c8-fa20-4af1-8640-12401a77b893&order=created_at.asc&limit=10 "HTTP/2 200 OK"
2025-11-01 00:00:55 INFO utils.conversation.supabase_memory: [PHASE1_DEBUG] add_turn called with metadata=None, type=<class 'NoneType'>
2025-11-01 00:00:55 INFO utils.conversation.supabase_memory: [PHASE1_METADATA] continuation_id=72e62dd6-eb38-437e-8b91-85fcf314fda6, storage_metadata={}
2025-11-01 00:00:55 INFO utils.conversation.supabase_memory: [ASYNC_SUPABASE] Submitting write to async queue for 72e62dd6-eb38-437e-8b91-85fcf314fda6
2025-11-01 00:00:55 INFO utils.conversation.supabase_memory: [ASYNC_SUPABASE] Queued write for 72e62dd6-eb38-437e-8b91-85fcf314fda6
2025-11-01 00:00:55 INFO utils.performance.timing: [TIMING] SupabaseMemory.add_turn completed in 0.195s
2025-11-01 00:00:55 INFO tools.workflow.orchestration: [SERIALIZATION_DEBUG] About to serialize response_data for debug
2025-11-01 00:00:55 INFO tools.workflow.orchestration: [SERIALIZATION_DEBUG] response_data type: <class 'dict'>
2025-11-01 00:00:55 INFO tools.workflow.orchestration: [SERIALIZATION_DEBUG] response_data keys: dict_keys(['status', 'step_number', 'total_steps', 'next_step_required', 'continuation_id', 'next_call', 'message', 'investigation_status', 'metadata'])
2025-11-01 00:00:55 INFO tools.workflow.orchestration: [SERIALIZATION_DEBUG] JSON serialization successful, length: 1107
2025-11-01 00:00:55 INFO tools.workflow.orchestration: [SERIALIZATION_DEBUG] About to create TextContent and return
2025-11-01 00:00:55 INFO tools.workflow.orchestration: [SERIALIZATION_DEBUG] TextContent created, about to return
2025-11-01 00:00:55 INFO httpx: HTTP Request: POST https://mxaazuhlqewmkweewyaz.supabase.co/rest/v1/messages?on_conflict=idempotency_key "HTTP/2 201 Created"
2025-11-01 00:00:55 INFO utils.caching.base_cache_manager: [CONVERSATION_CACHE] L2 (Redis) connected: redis:6379/0
2025-11-01 00:00:55 INFO utils.conversation.supabase_memory: [CONV_QUEUE] Processed update for 72e62dd6-eb38-437e-8b91-85fcf314fda6
2025-11-01 00:00:55 INFO src.daemon.ws.request_router: [SEMANTIC_CACHE] Cached result for debug (prompt: Testing the auto-execution fix. This is a simple t...)
