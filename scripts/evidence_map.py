#!/usr/bin/env python3
import os
import json
from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]
RAW_DIRS = [
    ROOT/"docs"/"augmentcode_phase2"/"raw",
    ROOT/"docs"/"System_layout"/"_raw",
    ROOT/"docs"/"sweep_reports",
]
OUT_MD = ROOT/"docs"/"augmentcode_phase2"/"evidence_map.md"


def scan_dir(base: Path) -> list[dict]:
    items = []
    if not base.exists():
        return items
    if base.is_file():
        rel = base.relative_to(ROOT)
        items.append({"path": str(rel).replace("\\", "/"), "size": base.stat().st_size})
        return items
    for p in sorted(base.rglob("*")):
        if p.is_file():
            rel = p.relative_to(ROOT)
            items.append({"path": str(rel).replace("\\", "/"), "size": p.stat().st_size})
    return items


def write_markdown(groups: dict[str, list[dict]]):
    OUT_MD.parent.mkdir(parents=True, exist_ok=True)
    with OUT_MD.open("w", encoding="utf-8") as f:
        f.write("## Evidence Map (Phase 2)\n\n")
        f.write("This index is generated by scripts/evidence_map.py.\n\n")
        for title, entries in groups.items():
            f.write(f"### {title}\n\n")
            for e in entries:
                f.write(f"- [{e['path']}]({e['path']})  ")
                f.write(f"({e['size']} bytes)\n")
            f.write("\n")


def main():
    groups = {}
    for d in RAW_DIRS:
        title = str(d.relative_to(ROOT)) if d.exists() else f"{d} (missing)"
        groups[title] = scan_dir(d)
    write_markdown(groups)
    print(json.dumps({"status": "ok", "written": str(OUT_MD.relative_to(ROOT))}))

if __name__ == "__main__":
    main()

